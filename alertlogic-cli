#! /usr/bin/env python2

import argparse
import sys
import os

def import_dependencies():
    try:
        global requests
        import requests
    except ImportError:
        print("requests library required, install it first: pip install requests")
        sys.exit(1)
    
    try:
        global alertlogic
        import alertlogic.core, alertlogic.commands, alertlogic.dynapi
    except ImportError:
        print("unable to find alertlogic library, check your installation")
        sys.exit(1)

def parse_args():
    parser = argparse.ArgumentParser(description="alertlogic cloud insight client")
    parser.add_argument("-p", "--profile", default="default", help="use a specific profile from your config")
    parser.add_argument("-a", "--account_id", default=None, help="use a specific account (managed accounts only)")
    subparsers = parser.add_subparsers(title="commands", description="valid commands", dest="command")
    
    parser_environment = subparsers.add_parser("environment", help="environment specific actions")
    subparsers_environment = parser_environment.add_subparsers(dest="subcommand")
    
    parser_set_deployment_mode = subparsers_environment.add_parser("set_deployment_mode",
                                                                    help="sets environment deployment mode")
    parser_set_deployment_mode.add_argument("-e", "--environment_id", required=True, help="environment id (uuid)")
    parser_set_deployment_mode.add_argument("-m", "--deployment_mode", required=True, choices=["readonly", "automatic"])
    
    return parser.parse_args()

def run_command(args):
    config = alertlogic.core.Config(profile=args.profile)
    session = alertlogic.core.Session(config)
    alertlogic.dynapi.load(session=session)
    
    if args.account_id:
        session.account = args.account_id
    
    if (args.command, args.subcommand) == ("environment", "set_deployment_mode"):
        alertlogic.commands.DeploymentMode.set(args.environment_id, args.deployment_mode)

def main():
    import_dependencies()
    args = parse_args()
    try:
        if run_command(args):
            print("ok")
        else:
            print("error")
    except alertlogic.core.AlertlogicException as e:
        print(e.message)
    except Exception as e:
        alertlogic.core.Constants.CONTACT_MESSAGE+"uncaught exception[ {} ] message[ {} ]".format(e, e.message)

if __name__ == "__main__":
    # DEBUG mode
    if os.environ.get("DEBUG"):
        print("Running on DEBUG mode")
        sys.path.insert(0, os.path.dirname(__file__))
        
        import traceback
        try: main()
        except: traceback.print_exc()
    # NORMAL mode
    else:
        main()
        sys.exit(0)
